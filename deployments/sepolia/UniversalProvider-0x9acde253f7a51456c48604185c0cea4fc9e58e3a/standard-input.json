{"language":"Solidity","sources":{"script/mock/UniversalProvider.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.20;\n\nimport 'src/access/IRoleProvider.sol';\n\ncontract UniversalProvider is IRoleProvider {\n  bool public constant override isPullProvider = true;\n\n  function getCredential(address) external view returns (uint32 timestamp) {\n    return uint32(block.timestamp);\n  }\n\n  function validateCredential(\n    address,\n    bytes calldata\n  ) external view override returns (uint32 timestamp) {\n    return uint32(block.timestamp);\n  }\n}\n"},"src/access/IRoleProvider.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IRoleProvider {\n  function isPullProvider() external view returns (bool);\n\n  function getCredential(address account) external view returns (uint32 timestamp);\n\n  /**\n   * @dev Validate a credential (e.g. a signature from an access token granter) for an account.\n   * @param account The account to validate the credential for.\n   * @param data The data to validate the credential with.\n   * @return timestamp The timestamp at which the credential was granted.\n   */\n  function validateCredential(\n    address account,\n    bytes calldata data\n  ) external returns (uint32 timestamp);\n}\n"}},"settings":{"remappings":["src/=src/","forge-std/=lib/forge-std/src/","ds-test/=lib/ds-test/src/","solmate/=lib/solmate/src/","solady/=lib/solady/src/","openzeppelin/=lib/openzeppelin-contracts/","sol-utils/=lib/sol-utils/src/","ethereum-access-token/=lib/ethereum-access-token/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","openzeppelin-contracts/=lib/openzeppelin-contracts/","vulcan/=lib/vulcan/src/"],"optimizer":{"enabled":true,"runs":50000},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","ir","irOptimized","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
